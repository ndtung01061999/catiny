DEFAULT_MIN_LENGTH = 64
DEFAULT_MAX_LENGTH = 2048

dto * with mapstruct
paginate * with  infinite-scroll
search * with elasticsearch
service * with serviceImpl
filter *


enum StatusName
{  
  ONLINE
  OFFLINE
  BUSY
  TEMPORARILY_ABSENT
}

enum DeviceType
{
  MOBILE
  TABLE
  DESKTOP
  LAPTOP
  OTHER_DEVICE
}

enum NotifyType
{
  SYSTEM
  MANAGER
  ADMIN
  USER
  ANONYMOUS
}

enum PostInType
{
  GROUP
  USER
  PAGE
}

enum PostType
{
  SIMPLE
  ADVANCE
  FROALA
}

enum FriendType
{
  FRIEND
  BEST_FRIEND
  FAMILY
  BLOCK
}
enum ProcessStatus
{
  NOT_PROCESSED
  PROCESSING
  PROCESSED
  NEED_PROCESS
  NEED_PROCESS_NOW
  NEED_HANDLE
  NEED_HANDLE_NOW
  ERROR
  DONE
}
enum EventType
{
  DAY
  MONTH
  YEAR
  ONLY_ONE
}




//enum ServerType
//{
//
//}
//
//// phần cấu hình Server
///**
//* @what?            -> The ServerConfig entity.
//* @why?             ->
//* @use-to           -> Chứa thông tin của một cụm máy chủ database , app ...
//* @commonly-used-in ->
//*
//* @describe         ->
//*/
//entity ServerConfig
//{
//    serverType ServerType
//}
///**
//* @what?            -> The ServerDetails entity.
//* @why?             ->
//* @use-to           -> Thông tin chi tiết của từng máy chủ
//* @commonly-used-in ->
//*
//* @describe         -> ví dụ có một cụm app docker swarm front end sẽ được chia đều các kết nối đến máy chủ này giảm tải lưu lượng mạng
//*/
//entity ServerDetails
//relationship OneToOne
//{
//	ServerConfig to ServerDetails
//}

entity HanhChinhVN
{
    /** name Example("Ninh Kiều")*/
    name String required
    /** slug Example("ninh-kieu")*/
    slug String required
    /** type Example("quan")*/
    type String required
    /** nameWithType Example("Quận Ninh Kiều") */
    nameWithType String  required
    /** code Example("916") */
    code String required unique
    /** parentCode Example("92") , equal to 0 is the city*/
    parentCode String required
    /** path Example("Ninh Kiều, Cần Thơ")*/
    path String
    /** pathWithType Example("Quận Ninh Kiều, Thành phố Cần Thơ")*/
    pathWithType String
}

/**
* @what?            -> The MasterUser entity.
* @why?             -> User (mặc định của jhipster) không cho thêm cột (nếu thêm thì sau khó update)
* @use-to:          -> Lưu thông tin cơ bản của một người dùng
* @commonly-used-in -> Thường sử dụng khi thao tác với tài khoản trong service trên server
*
* @describe      	  -> Những dữ liệu của tài khoản và thương xuyên sử dụng (trong service) sẽ được lưu ở đây
*/
entity MasterUser
{
    /** uuid *         : this is reference key (client) .primary key được sử dụng trong các service còn uuid này để định danh giao tiếp với client(frontend) */
    uuid UUID required unique
    /** fullName : tên hiển thị . thực ra chỉ là firstName + lastName . nhưng sẽ rất bất tiện */
    fullName String required
    /** nickname : biệt danh của người dùng */
    nickname String
    /** avatar : @type Json -> ảnh đại diện của người dùng */
    avatar TextBlob
    /** quickInfo      : @type Json -> thông tin nhanh về người dùng này dùng trong giới thiệu sơ khi chỉ chuột vào người dùng */
    quickInfo TextBlob
}
/**
* @what?         	  -> The UserProfile entity .
* @why?          	  ->
* @use-to:       	  -> Lưu thông tin mở rộng của người dùng (trường học cơ quan làm việc ...)
* @commonly-used-in -> Trang cá nhân (trang giới thiệu)
*
* @describe      	  -> Đây là bảng NoSQL một số trường ở dưới dạng JSON ,NoSQL vì dữ liệu mỗi trường học , cơ quan ,nới sống ... đôi khikhông giống nhau
*/
entity UserProfile
{
    /** uuid *         : this is reference key (client) .primary key được sử dụng trong các service còn uuid này để định danh giao tiếp với client(frontend) */
    uuid UUID required unique

    /** work : nơi làm việc
     * @data-type : Json
     * @describe : những nơi, công ty đã từng làm việc , khoảng thời gian vị trí ...
     * @example :
     *  -companyName
     *  -companyAddress
     *  -companyContact
     * @author           -> yuvytung.
     */
   	work TextBlob
    /** education : học vấn
     * @data-type : Json
     * @describe : học vấn thế nào tốt nghiệp trường nào học tại đâu khoảng thời gian nào , bằng cấp chứng chỉ ra sao  ... */
    education TextBlob
    /** placesLived : những nơi đã từng sống
     * @data-type : Json
     * @describe : sống ở đâu khoảng thời gian nào có gì tại nơi sống ... */
    placesLived TextBlob
    /** contactInfo : những thông in liên hệ cơ bản
     * @data-type : Json
     * @describe : số điện thoại email , địa chỉ ... */
    contactInfo TextBlob
    /** webSocialLinks : các mạng xã hội sử dụng . trang web ...
     * @data-type : Json
     * @describe : thông tin về mạng xã hội sử dụng ... */
    webSocialLinks TextBlob
    /** basicInfo : thông tin cơ bản của người dùng
     * @data-type : Json
     * @describe : những thông tin tóm tắt để giới thiệu nổi bật */
    basicInfo TextBlob
    /** relationshipInfo : những mối liên hệ với ai đó
     * @data-type : Json
     * @describe : ví dụ như đã kết hôn với ai ... */
    relationshipInfo TextBlob
    /** family : những người trong gia đình
     * @data-type : Json
     * @describe : anh em bạn bè người thân trong gia đình */
    family	TextBlob
    /** detailAbout : chi tiết về bản thân mình
     * @data-type : Json
     * @describe : những thôn tin chi tết về bản thân như ngày tháng năm sinh nơi ở ... */
    detailAbout TextBlob
    /** lifeEvents : sự kiên lớn trong cuộc đời
     * @data-type : Json
     * @describe : những sự kiện như sinh , tốt nghiệp . lấy vợ chồng , có con ... */
    lifeEvents TextBlob
    /** hobbies : sở thích của bản thân
     * @data-type : Json
     * @describe : sở thích của ban thân là gì , phim , nhạc , sách , ... */
    hobbies TextBlob
    /** featured : điểm nổi bật của bản thân
     * @data-type : Json
     * @describe : cá tính thế nào , đã làm nhứng gì rất đặc sắc .... */
    featured TextBlob
}
/**
* @what?         	-> The AccountStatus entity.
* @why?          	->
* @use-to:       	-> Lưu , quản lý trạng thái của tài khoản đang on hay off ...
* @commonly-used-in -> Những nghiệp vũ nhắn tin,thông báo cần biết trạng thái của tài khoản ...
*
* @describe      	->
*/
entity AccountStatus
{
    /** uuid *         : this is reference key (client) .primary key được sử dụng trong các service còn uuid này để định danh giao tiếp với client(frontend) */
    uuid UUID required unique
    /** accountStatus  : thạng thái hiện tại của người dùng*/
    accountStatus StatusName
    /** lastVisited    : thời gian truy cập cuối cùng gần nhất  */
    lastVisited Instant
    /** statusComment  : người dùng comment lại trạng thái để hiển thị ra nếu muốn */
    statusComment String
}
/**
* @what?            -> The Album entity
* @why?             ->
* @use-to           -> Lưu thông tin về một bộ album của người dùng
* @commonly-used-in -> Người dùng nhóm một bộ ảnh vào một album
*
* @describe         ->
*/
entity Album
{
    /** uuid *         : this is reference key (client) .primary key được sử dụng trong các service còn uuid này để định danh giao tiếp với client(frontend) */
    uuid UUID required unique
    /** name           : tên của album */
    name String required
    /** note           : trú thích của album (ví dụ album đại học) */
    note String 
    /** avatar         : @type Json -> ảnh đại diện của Album */
    avatar TextBlob
}
/**
* @what?            -> The DeviceStatus entity.
* @why?             ->
* @use-to           -> Những thiết bị đang truy cập thông tin chi tiết về chúng ...
* @commonly-used-in -> Những nghiệp vụ cần biết chi tiết trang thái của các thiết bị
*
* @describe         ->
*/
entity DeviceStatus
{
    /** uuid *         : this is reference key (client) .primary key được sử dụng trong các service còn uuid này để định danh giao tiếp với client(frontend) */
    uuid UUID required unique
    /** deviceName     : tên của thiết bị nếu có */
    deviceName String
    /** deviceName     : loại thiết bị */
    deviceType DeviceType
    /** deviceStatus   : trạng thái hiện tại của thiết bị là gì*/
	deviceStatus StatusName
	/** lastVisited    : thời gian truy cập lần cuối cùng của thiết bị này */
    lastVisited Instant
    /** statusComment  : người dùng comment lại trạng thái nếu muốn */
    statusComment String
}
/**
* @what?            -> The Event entity.
* @why?             ->
* @use-to           -> Lưu những sự kiện
* @commonly-used-in -> Tạo Sự kiện
*
* @describe         ->
*/
entity Event
{
    /** uuid *         : this is reference key (client) .primary key được sử dụng trong các service còn uuid này để định danh giao tiếp với client(frontend) */
    uuid UUID required unique
    /** title          : tiêu đề event */
    title String
    /** avatar         : @type Json -> ảnh đại diện event */
    avatar TextBlob
    /** content        : nội dung event */
    content TextBlob
    /** type           :loại event */
    type EventType
    /** description    : mô tả chi tết về event */
    description TextBlob
    /** startTime      : thời gian bắt đầu */
    startTime Instant
    /** endTime        : thời gian kết thúc */
    endTime Instant
    /** tagLine        : thẻ cho event */
    tagLine String
    /** imageCollection: @type Json -> tập ảnh của event */
    imageCollection TextBlob
    /** videoCollection: @type Json -> tập video của event */
    videoCollection TextBlob
}
/**
* @what?            -> The Friend entity.
* @why?             ->
* @use-to           -> Quản lý phần kết bạn, các mối liên hệ bạn bè ...
* @commonly-used-in -> Bạn bè và các liên kết bạn bè ...
*
* @describe         ->
*/
entity Friend
{
    /** uuid *         : this is reference key (client) .primary key được sử dụng trong các service còn uuid này để định danh giao tiếp với client(frontend) */
    uuid UUID required unique
    friendType FriendType
}
/**
* @what?            -> The FollowUser entity.
* @why?             ->
* @use-to           -> Quản lý những người mà người dùng đăng ký theo dõi
* @commonly-used-in -> Chủ đề mà người dùng theo dõi
*
* @describe         ->
*/
entity FollowUser
{
    /** uuid *         : this is reference key (client) .primary key được sử dụng trong các service còn uuid này để định danh giao tiếp với client(frontend) */
    uuid UUID required unique
}
/**
* @what?            -> The FollowGroup entity.
* @why?             ->
* @use-to           -> Quản lý các nhóm mà người dùng đăng ký theo dõi
* @commonly-used-in -> Chủ đề mà người dùng theo dõi
*
* @describe         ->
*/
entity FollowGroup
{
    /** uuid *         : this is reference key (client) .primary key được sử dụng trong các service còn uuid này để định danh giao tiếp với client(frontend) */
    uuid UUID required unique
}
/**
* @what?            -> The FollowPage entity.
* @why?             ->
* @use-to           -> Quản lý các trang mà người dùng đăng ký theo dõi
* @commonly-used-in -> Chủ đề mà người dùng theo dõi
*
* @describe         ->
*/
entity FollowPage
{
    /** uuid *         : this is reference key (client) .primary key được sử dụng trong các service còn uuid này để định danh giao tiếp với client(frontend) */
    uuid UUID required unique
}
/**
* @what?            -> The FileInfo entity.
* @why?             ->
* @use-to           -> Quản lý thông tin về file, vị trí file ...
* @commonly-used-in -> Những file mà người dùng upload (ảnh video ...)
*
* @describe         ->
*/
entity FileInfo
{
    /** uuid *         : this is reference key (client) .primary key được sử dụng trong các service còn uuid này để định danh giao tiếp với client(frontend) */
    uuid UUID required unique
    /** nameFile       : tên của file nếu có */
    nameFile String
    /** typeFile       : loại file */
    typeFile String
    /** path           : đường dẫn file trên server */
    path String maxlength(1024)
    /** dataSize       : kích thước file theo byte */
    dataSize Long
}
/**
* @what?            -> The GroupPost entity
* @why?             -> mọi người cần tạo ra một nhóm riêng hoặc chung để có thể trao đổi
* @use-to           -> quản lý nhóm
* @commonly-used-in -> các nhóm
*
* @describe         ->
*/
entity GroupPost
{
    /** uuid *         : this is reference key (client) .primary key được sử dụng trong các service còn uuid này để định danh giao tiếp với client(frontend) */
    uuid UUID required unique
    /** name           : tên của group này */
    name String required
    /** avatar : @type Json -> ảnh đại diện của Group */
    avatar TextBlob
    /** quickInfo      : @type Json -> thông tin giới thiệu sơ qua của group này */
    quickInfo TextBlob
}
/**
* @what?            -> The GroupProfile entity.
* @why?             ->
* @use-to           -> Những thông tin trong phần giới thiệu của nhóm được lưu tại đây
* @commonly-used-in -> Thường thấy trong phần giới thiệu của nhóm
*
* @describe         -> Đây là một bảng NoSQL dữ liệu một số field ở dưới dạng Json
*/
entity GroupProfile
{
    /** uuid *         : this is reference key (client) .primary key được sử dụng trong các service còn uuid này để định danh giao tiếp với client(frontend) */
    uuid UUID required unique
}
/**
* @what?            -> The Image entity.
* @why?             ->
* @use-to           -> Lưu thông tin Ảnh mà người dùng upload lên
* @commonly-used-in ->
*
* @describe         ->
*/
entity Image
{
    /** uuid *         : this is reference key (client) .primary key được sử dụng trong các service còn uuid này để định danh giao tiếp với client(frontend) */
    uuid UUID required unique
    /** name           : tên của ảnh . muốn lấy ảnh sẽ gọi theo tên này. sẽ ra một danh sách các anh gồm (ảnh nguyên gốc , các ảnh đã tối ưu , cắt ... từ ảnh gốc đó)*/
    name String
    /** width          : chiều rộng ảnh */
    width Integer
    /** height         : chiều cao ảnh */
    height Integer
    /** quality        : chất lượng sau khi xử lý */
    quality Float min(0) max(1)
    /** pixelSize      : kích thước của ảnh */
    pixelSize Integer
    /** priorityIndex  : chỉ số ưu tiên (số lớn nhỏ ưu tiên càng cao)*/
    priorityIndex Long
    /** dataSize       : kích thước file theo byte */
    dataSize Long
}
/**
* @what?            -> The NewsFeed entity.
* @why?             -> người dùng mà xem trực tiếp các Post thì một số bài đăng sẽ không phù hợp dễ gây chán khi xem
* @use-to           -> Ở đây chứa thông tin của những Post hiển thị cho người dùng xem
* @commonly-used-in -> Được sử dụng trong phần hiển thị các bài đăng trên news feed
*
* @describe         -> trong phần bản tin thay vì hiển thị trực tiếp các Post cho người dùng xem
*  ta sẽ tính toán độ phù hợp và add vào bảng này sau đó cho người dùng xem
*/
entity NewsFeed
{
    /** uuid *         : this is reference key (client) .primary key được sử dụng trong các service còn uuid này để định danh giao tiếp với client(frontend) */
    uuid UUID required unique
    /** priorityIndex  : chỉ số ưu tiên (số lớn nhỏ ưu tiên càng cao)*/
    priorityIndex Long
}
/**
* @what?            -> The Notification entity.
* @why?             ->
* @use-to           -> Chứa những thông báo đến người dùng
* @commonly-used-in -> Thường xuất hiện trong chức năng thông báo của người dùng
*
* @describe         ->
*/
entity Notification
{
    /** uuid *         : this is reference key (client) .primary key được sử dụng trong các service còn uuid này để định danh giao tiếp với client(frontend) */
    uuid UUID required unique
    /** notifyType     : loại thông báo */
    notifyType NotifyType
    title String
    content TextBlob
}
/**
* @what?            -> The MessageGroup entity.
* @why?             ->
* @use-to           -> Chứa thông tin các nhóm mà hiện tại người dùng đang ở trong đó (phần nhắn tin)
* @commonly-used-in -> Hiển thị các tin nhắn
*
* @describe         -> một nhóm tạo ra sẽ là một uuid . nếu nhắn tin cặp thì sẽ sắp xếp login sau đó hash md5 rồi chuyển thành định dạng uuid
*/
entity MessageGroup
{
    /** uuid *         : this is reference key (client) .primary key được sử dụng trong các service còn uuid này để định danh giao tiếp với client(frontend) */
    uuid UUID required unique
    /** groupName */
    groupName String
    /** avatar : @type Json -> ảnh đại diện của MessageGroup */
    avatar TextBlob
    /** addBy */
    addBy String
}
/**
* @what?            -> The MessageContent entity.
* @why?             ->
* @use-to           -> Chứa Những tin nhắn trong các nhóm cụ thể
* @commonly-used-in ->
*
* @describe         ->
*/
entity MessageContent
{
    /** uuid *         : this is reference key (client) .primary key được sử dụng trong các service còn uuid này để định danh giao tiếp với client(frontend) */
    uuid UUID required unique
    /** senderName     : tên người gửi */
    senderName String

    /** attachInfo     : đính kèm tệp ảnh video ... */
    attach TextBlob
    /** content        : nội dung tin nhắn */
    content TextBlob
    /** status         : trạng thái của tin nhắn này, đã gửi chưa , ai đã nhận được , đã xem chưa đã thu hồi hay đã xóa... */
    status TextBlob
    /** searchField    : lưu content tin nhắn lọc dấu ... để sau này search */
    searchField TextBlob
}
/**
* @what?            -> The PagePost entity.
* @why?             ->
* @use-to           -> Lưu các Trang người dùng tạo ra
* @commonly-used-in -> Cũng tương tự như bài đăng của một người dùng những sẽ chuyên biệt về  một chủ đề
*
* @describe         ->
*/
entity PagePost
{
    /** uuid *         : this is reference key (client) .primary key được sử dụng trong các service còn uuid này để định danh giao tiếp với client(frontend) */
    uuid UUID required unique
    /** name           : tên của page này*/
    name String required
    /** avatar : @type Json -> ảnh đại diện của Page */
    avatar TextBlob
    /** quickInfo      : @type Json ->thông tin nổi bật giới thiệu sơ qua về page */
    quickInfo TextBlob
}
/**
* @what?            -> The PageProfile entity
* @why?             ->
* @use-to           -> Lưu phần giới thiệu của các trang
* @commonly-used-in -> hiển thị giới thiệu của các trang
*
* @describe         ->
*/
entity PageProfile
{
    /** uuid *         : this is reference key (client) .primary key được sử dụng trong các service còn uuid này để định danh giao tiếp với client(frontend) */
    uuid UUID required unique
}

/**
* @what?            -> The Post entity
* @why?             ->
* @use-to           -> lưu các bài viết của người dùng
* @commonly-used-in -> đăng và xem các bài viết
*
* @describe         ->
*/
entity Post
{
    /** uuid *         : this is reference key (client) .primary key được sử dụng trong các service còn uuid này để định danh giao tiếp với client(frontend) */
    uuid UUID required unique
    /** postInType     : bài đăng này đăng ở đâu : người dùng , nhóm hay trang */
    postInType PostInType
    /** postType       : bài đăng này đơn giản , phức tạp hay dùng froala */
    postType PostType
    /** content        : @type Json -> nội dùng bài đăng dữ liệu tùy theo postType */
    content TextBlob
    searchField TextBlob
}
/**
* @what?            -> The PostComment entity.
* @why?             ->
* @use-to           -> Lưu những bình luận của người dùng trong một bài đăng cụ thể
* @commonly-used-in -> được biết dưới dạng bình luận của các bài đăng
*
* @describe         ->
*/
entity PostComment
{
    /** uuid *         : this is reference key (client) .primary key được sử dụng trong các service còn uuid này để định danh giao tiếp với client(frontend) */
    uuid UUID required unique
    content TextBlob
}
/**
* @what?            -> The PostLike entity.
* @why?             ->
* @use-to           -> Lưu thông tin về những lượt like của bài đăng
* @commonly-used-in ->
*
* @describe         ->
*/
entity PostLike
{
    /** uuid *         : this is reference key (client) .primary key được sử dụng trong các service còn uuid này để định danh giao tiếp với client(frontend) */
    uuid UUID required unique
}

/**
* @what?            -> The RankUser entity.
* @why?             ->
* @use-to           -> Xếp hạng của bản thân Trong toàn mạng , trong khu vực , trong nhóm người
* @commonly-used-in -> thường thấy trong phần
*
* @describe         ->
*/
entity RankUser
{
    /** uuid *         : this is reference key (client) .primary key được sử dụng trong các service còn uuid này để định danh giao tiếp với client(frontend) */
    uuid UUID required unique
    ratingPoints Float
}
/**
* @what?            -> The RankGroup entity.
* @why?             ->
* @use-to           -> Xếp hạng theo nhóm : toàn mạng ,khu vực , nhóm người (khoảng 30-100 người)
* @commonly-used-in ->
*
* @describe         ->
*/
entity RankGroup
{
    /** uuid *         : this is reference key (client) .primary key được sử dụng trong các service còn uuid này để định danh giao tiếp với client(frontend) */
    uuid UUID required unique
}
/**
* @what?            -> The Video entity.
* @why?             ->
* @use-to           -> Lưu thông tin video mà người dùng upload lên
* @commonly-used-in ->
*
* @describe         ->
*/
entity Video
{
    /** uuid *         : this is reference key (client) .primary key được sử dụng trong các service còn uuid này để định danh giao tiếp với client(frontend) */
    uuid UUID required unique
    name String
    /** width          : chiều rộng video */
    width Integer
    /** height         : chiều cao video */
    height Integer
    /** qualityImage   : chất lượng ảnh sau khi xử lý */
    qualityImage Float min(0) max(1)
    /** qualityAudio   : chất lượng âm thanh sau khi xử lý */
    qualityAudio Float min(0) max(1)
    /** quality        : chất lượng chung sau khi xử lý */
    quality Float min(0) max(1)
    /** pixelSize      : kích thước của ảnh */
    pixelSize Integer
    /** priorityIndex  : chỉ số ưu tiên (số lớn nhỏ ưu tiên càng cao)*/
    priorityIndex Long
    /** dataSize       : kích thước file theo byte */
    dataSize Long
}

/**
* @what?            -> The VideoStream entity.
* @why?             ->
* @use-to           -> Lưu thông tin video ... khi đã kết thúc stream
* @commonly-used-in -> Sau khi kết thức stream thì video lưu lai cũng chỉ tương tự như một video thông thường
*
* @describe         ->
*/
entity VideoStream
{
    /** uuid *         : this is reference key (client) .primary key được sử dụng trong các service còn uuid này để định danh giao tiếp với client(frontend) */
    uuid UUID required unique
}
/**
* @what?            -> The VideoLiveStreamBuffer entity.
* @why?             ->
* @use-to           -> Lưu từng phần video dưới dạng base64 khi đang stream video
* @commonly-used-in -> thường sử dụng khi đang live stream
*
* @describe         -> stream xong và xử lý xong không cân thì xóa (đây chỉ là bảng tạm)
*/
entity VideoLiveStreamBuffer
{
    /** uuid *         : this is reference key (client) .primary key được sử dụng trong các service còn uuid này để định danh giao tiếp với client(frontend) */
    uuid UUID required unique
    bufferData AnyBlob
}
/**
* @what?            -> The TopicInterest entity.
* @why?             ->
* @use-to           -> Lưu những chủ đề mà người dùng quan tâm
* @commonly-used-in -> chủ đề quan tâm để lọc ra cho người dùng xem
*
* @describe         ->
*/
entity TopicInterest
{
    /** uuid *         : this is reference key (client) .primary key được sử dụng trong các service còn uuid này để định danh giao tiếp với client(frontend) */
    uuid UUID required unique
    title String
    content TextBlob
}
/**
* @what?            -> The TodoList entity.
* @why?             ->
* @use-to           -> Lưu danh sách công việc gợi ý cho người dùng thực hiện
* @commonly-used-in -> Hiển thị bảng TodoList cho người dùng thực hiện
*
* @describe         ->
*/
entity TodoList
{
    /** uuid *         : this is reference key (client) .primary key được sử dụng trong các service còn uuid này để định danh giao tiếp với client(frontend) */
    uuid UUID required unique
    title String
    content TextBlob
}

//entity Badge //{}
//entity Story //{}
//entity ChallengesMapDetails  //{}
//entity MyChallengesMap //{}




relationship OneToOne
{
    GroupPost{profile} to GroupProfile{group}
    PagePost{profile} to PageProfile{page}
    VideoStream{video} to Video{videoStream}
    Image{fileInfo} to FileInfo
    Video{fileInfo} to FileInfo
//    MasterUser to MyChallengesMap
}

relationship ManyToOne
{
    FollowGroup{followGroupDetails} to GroupPost
    FollowPage{followPageDetails} to PagePost
    NewsFeed to Post
    RankUser to RankGroup
}
relationship OneToMany
{
    AccountStatus to DeviceStatus
//    MyChallengesMap to ChallengesMapDetails
    GroupPost{myPostInGroup} to Post
    PagePost{myPostInPage} to Post
    MessageGroup to MessageContent
    Image{imageProcessed} to Image{imageOriginal}
    Video{videoProcessed} to Video{videoOriginal}
    Post{comment} to PostComment
    Post{like} to PostLike
    PostComment{like} to PostLike
    Post{postShareChildren} to Post{postShareParent}
    PostComment{commentReply} to PostComment{commentParent}
    VideoStream to VideoLiveStreamBuffer
}

relationship ManyToMany
{
    Album to Image
    TopicInterest to Post
    TopicInterest to PagePost
    TopicInterest to GroupPost
}
/** relationship with MasterUser */
relationship OneToOne
{
    MasterUser to User with jpaDerivedIdentifier
//    MasterUser{myProfile} to UserProfile
//    MasterUser{myAccountStatus} to AccountStatus
    MasterUser{myRank} to RankUser
}
relationship OneToMany
{
//    MasterUser{myPage} to PagePost
//    MasterUser{myFile} to FileInfo
//    MasterUser{myNotification} to Notification
//    MasterUser{myFriend} to Friend{masterUser}
//    MasterUser{myFollowUser} to FollowUser{masterUser}
//    MasterUser{myFollowGroup} to FollowGroup{masterUser}
//    MasterUser{myFollowPage} to FollowPage{masterUser}
//    MasterUser{myNewsFeed} to NewsFeed
//    MasterUser{myTodoList} to TodoList
//    MasterUser{myPost} to Post{poster}
//  with  BaseInfo
    MasterUser{myBaseInfoCreated} to BaseInfo{createdBy}
    MasterUser{myBaseInfoModified} to BaseInfo{modifiedBy}
    MasterUser{OwnerOf} to BaseInfo{owner}
    MasterUser to Permission
}
relationship ManyToOne
{
    Friend{friendDetails} to MasterUser
    FollowUser{followUserDetails} to MasterUser
//    MessageContent{sender} to MasterUser
//    PostLike{userLike} to MasterUser{myLike}
//    PostComment{userComment} to MasterUser{myComment}
}
relationship ManyToMany
{
//    MasterUser{myGroupPost} to GroupPost{userInGroup}
//    MasterUser to MessageGroup
    MasterUser to TopicInterest
}

/** BaseInfo */
entity BaseInfo
{
	  /** uuid *         : this is reference key (client) .primary key được sử dụng trong các service còn uuid này để định danh giao tiếp với client(frontend) */
    uuid UUID required unique
    /** processStatus *: @defaultValue( DONE ) -> tình trạng xử lý sử dụng trong phê duyệt */
    processStatus ProcessStatus
    /** modifiedClass *: thực hiện sửa đổi bản ghi này ở service class nào */
    modifiedClass String
    /** createdDate *  : thời gian tạo ra bản ghi này (lần đầu tiên) */
    createdDate  Instant
    /** modifiedDate * : thời gian sửa bản ghi này */
    modifiedDate  Instant
    /** notes *        : @type Json -> chú thích thêm hoặc những lưu ý cho bản ghi này ở dưới dạng Json" */
    notes TextBlob
    /** deleted *      : @defaultValue( false ) -> đánh dấu là đã xóa */
    deleted Boolean
    /** priorityIndex *: chỉ số ưu tiên (số lớn nhỏ ưu tiên càng cao) */
    priorityIndex Long
    /** countUse *     : đếm số lần truy cập vào bản ghi này để xem sửa xóa **/
    countUse Long
}
entity ClassInfo
{
    /** uuid *         : this is reference key (client) .primary key được sử dụng trong các service còn uuid này để định danh giao tiếp với client(frontend) */
    uuid UUID required unique
    /** packageName *  : tên package */
    namePackage String
    /** fullName *     : tên đầy đủ của class . package+ClassName */
    fullName String required unique
    /** classname *    : tên của class */
    className String
}
entity Permission
{
	 /** uuid *         : this is reference key (client) .primary key được sử dụng trong các service còn uuid này để định danh giao tiếp với client(frontend) */
    uuid UUID required unique
    /** quyền đọc */
    read Boolean
    /** quyền ghi và sửa*/
    write Boolean
    /** quyền chia sẻ */
    share Boolean
    /** quyền xóa */
    delete Boolean
    /** quyền trao quyền cho user khác*/
    add Boolean
    /** cấp độ 0->* số nhỏ hơn sẽ có quyền lớn hơn */
    level Integer
}
entity HistoryUpdate
{
	  /** uuid *         : this is reference key (client) .primary key được sử dụng trong các service còn uuid này để định danh giao tiếp với client(frontend) */
    uuid UUID required unique
    /** version        : phiên bản (bắt đầu từ 0)*/
    version Integer
    /** content        : @type Json -> lịch sử cập nhật bản ghi này, những bản ghi cũ sẽ được lưu lại ở đây dưới dạng json */
    content TextBlob
}
relationship OneToOne
{
    MasterUser{baseInfo} to BaseInfo
    UserProfile to BaseInfo
    AccountStatus to BaseInfo
    DeviceStatus to BaseInfo
    Friend to BaseInfo
    FollowUser to BaseInfo
    FollowGroup to BaseInfo
    FollowPage to BaseInfo
    FileInfo to BaseInfo
    PagePost to BaseInfo
    PageProfile to BaseInfo
    GroupPost to BaseInfo
    Post to BaseInfo
    PostComment to BaseInfo
    PostLike to BaseInfo
    GroupProfile to BaseInfo
    NewsFeed to BaseInfo
    MessageGroup to BaseInfo
    MessageContent to BaseInfo
    RankUser to BaseInfo
    RankGroup to BaseInfo
    Notification to BaseInfo
    Album to BaseInfo
    Video to BaseInfo
    Image to BaseInfo
    VideoStream to BaseInfo
    VideoLiveStreamBuffer to BaseInfo
    TopicInterest to BaseInfo
    TodoList to BaseInfo
    Event to BaseInfo
    //Badge to BaseInfo
    //Story to BaseInfo
    //ChallengesMapDetails to BaseInfo
    //MyChallengesMap to BaseInfo
}
relationship ManyToOne
{
    Permission to BaseInfo
    BaseInfo to ClassInfo
}
relationship OneToMany
{
    BaseInfo to HistoryUpdate
}